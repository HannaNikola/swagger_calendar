{
    "openapi": "3.0.1",
    "info": {
      "title": "Calendar API",
      "version": "1.0.0",
      "description": "API documentation for Calendar App",
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "servers": [
      {
        "url": "https://swagger-calendar.onrender.com"
      }
    ],
    "paths": {
      "/api/events/": {
        "get": {
          "tags": ["Events"],
          "summary": "Get all events",
          "description": "Returns the full collection of events from the database.",
          "responses": {
            "200": {
              "description": "A list of events",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Event"
                    }
                  },
                  "example": [
                    {
                      "title": "Team meeting",
                      "start": "2025-04-17T10:00:00.000Z",
                      "end": "2025-04-17T11:00:00.000Z",
                      "allDay": false,
                      "addTask": false
                    },
                    {
                      "title": "Doctor Appointment",
                      "start": "2025-04-18T15:30:00.000Z",
                      "end": "2025-04-18T16:00:00.000Z",
                      "allDay": false,
                      "addTask": true
                    }
                  ]
                }
              }
            },
            "404": {
              "description": "Route not found"
            }
          }
        },
        "post": {
          "tags": ["Events"],
          "summary": "Create a new event",
          "description": "Adds a new event to the database.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewEvent"
                },
                "example": {
                  "title": "Test Event",
                  "start": "2025-04-20T10:00:00Z",
                  "end": "2025-04-20T11:00:00Z",
                  "allDay": false,
                  "addTask": true
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Event created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input"
            }
          }
        }
      },
      "/api/events/{id}": {
        "get": {
          "tags": ["Events"],
          "summary": "Get one event by Id",
          "description": "Returns a single event from the database by its ID.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The ID of the event to retrieve",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful operation - single event returned",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            },
            "404": {
              "description": "Event not found"
            }
          }
        },
        "put": {
          "tags": ["Events"],
          "summary": "Update an event by ID",
          "description": "Updates an existing event in the database by its ID.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The ID of the event to update",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewEvent"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successfully updated event",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            },
            "404": {
              "description": "Event not found"
            }
          }
        },
        "delete": {
          "tags": ["Events"],
          "summary": "Delete an event by ID",
          "description": "Deletes a specific event from the database using its ID.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The ID of the event to delete",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Event deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Event deleted successfully"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Event not found"
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "Event": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "6628a6f2bcf42f001c26eec9"
            },
            "title": {
              "type": "string",
              "example": "Meeting with team"
            },
            "start": {
              "type": "string",
              "format": "date-time",
              "example": "2025-04-18T10:00:00Z"
            },
            "end": {
              "type": "string",
              "format": "date-time",
              "example": "2025-04-18T11:00:00Z"
            },
            "allDay": {
              "type": "boolean",
              "example": false
            },
            "addTask": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "NewEvent": {
          "type": "object",
          "required": ["title", "start", "end"],
          "properties": {
            "title": {
              "type": "string",
              "example": "New Event Title"
            },
            "start": {
              "type": "string",
              "format": "date-time",
              "example": "2025-04-20T10:00:00Z"
            },
            "end": {
              "type": "string",
              "format": "date-time",
              "example": "2025-04-20T11:00:00Z"
            },
            "allDay": {
              "type": "boolean",
              "example": false
            },
            "addTask": {
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    }
  }
  