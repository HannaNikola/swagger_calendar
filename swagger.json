{
  "openapi": "3.0.1",
  "info": {
    "title": "Calendar API",
    "version": "1.0.0",
    "description": "API documentation for Calendar App",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://calendar-back-end-s3b2.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Events",
      "description": "Operations with calendar events"
    },
    {
      "name": "Todos",
      "description": "Operations with todo tasks"
    }
  ],
  "paths": {
    "/api/events/": {
      "get": {
        "tags": ["Events"],
        "summary": "Get all events",
        "description": "Returns the full collection of events from the database.",
        "responses": {
          "200": {
            "description": "A list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                },
                "example": [
                  {
                    "title": "Team meeting",
                    "start": "2025-04-17T10:00:00.000Z",
                    "end": "2025-04-17T11:00:00.000Z",
                    "allDay": false,
                    "addTask": false
                  },
                  {
                    "title": "Doctor Appointment",
                    "start": "2025-04-18T15:30:00.000Z",
                    "end": "2025-04-18T16:00:00.000Z",
                    "allDay": false,
                    "addTask": true
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Route not found"
          }
        }
      },
      "post": {
        "tags": ["Events"],
        "summary": "Create a new event",
        "description": "Adds a new event to the database.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEvent"
              },
              "example": {
                "title": "Test Event",
                "start": "2025-04-20T10:00:00Z",
                "end": "2025-04-20T11:00:00Z",
                "allDay": false,
                "addTask": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/events/{id}": {
      "get": {
        "tags": ["Events"],
        "summary": "Get one event by Id",
        "description": "Returns a single event from the database by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the event to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation - single event returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "put": {
        "tags": ["Events"],
        "summary": "Update an event by ID",
        "description": "Updates an existing event in the database by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the event to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "delete": {
        "tags": ["Events"],
        "summary": "Delete an event by ID",
        "description": "Deletes a specific event from the database using its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the event to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Event deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
    },
    "/api/todo/": {
      "get": {
        "tags": ["Todo"],
        "summary": "Get all Todo",
        "description": "Returns the full collection of Todo from the database.",
        "responses": {
          "200": {
            "description": "A list of Todo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array"
                },
                "example": [
                  {
                    "_id": "68a3563ec408cc56ed9c8d69",
                    "title": "Task",
                    "description": "Give a cat food",
                    "isImportant": true,
                    "isCompleted": false,
                    "end": "2025-08-09T14:35:00.000Z",
                    "allDay": true,
                    "eventId": "68975ca0c0053e8732e42845",
                    "repeat": "none",
                    "reminder": {
                      "triggerBefore": "30min",
                      "notifyAt": "2025-08-09T14:05:00.000Z",
                      "notified": false
                    },
                    "createdAt": "2025-08-18T16:35:10.955Z",
                    "updatedAt": "2025-08-18T18:01:23.854Z",
                    "isOverdue": true
                  },
                  {
                    "_id": "68a3563ec408cc56ed9c8d69",
                    "title": "Birthday party",
                    "description": "Buy present for",
                    "isImportant": true,
                    "isCompleted": false,
                    "end": "2025-08-09T14:35:00.000Z",
                    "allDay": true,
                    "eventId": "68975ca0c0053e8732e42845",
                    "repeat": "none",
                    "reminder": {
                      "triggerBefore": "30min",
                      "notifyAt": "2025-08-09T14:05:00.000Z",
                      "notified": false
                    },
                    "createdAt": "2025-08-18T16:35:10.955Z",
                    "updatedAt": "2025-08-18T18:01:23.854Z",
                    "isOverdue": true
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Route not found"
          }
          
        }
      },
      "post": {
          "tags": ["Todo"],
          "summary": "Create a new Todo",
          "description": "Adds a new Todo to the database.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Todo"
                },
                "example": {
                  "title": "Birthday party",
                    "description": "Buy present for",
                    "isImportant": true,
                    "isCompleted": false,
                    "end": "2025-08-09T14:35:00.000Z",
                    "allDay": true,
                    "eventId": "68975ca0c0053e8732e42845",
                    "repeat": "none",
                    "reminder": {
                      "triggerBefore": "30min",
                      "notifyAt": "2025-08-09T14:05:00.000Z",
                      "notified": false
                    }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Todo created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Todo"
                  }
                }
              }
            },
            "400": {
              "description": "Router not found"
            }
          }
        }
    }
  },
  "components": {
    "schemas": {
      "NewEvent": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "6628a6f2bcf42f001c26eec9"
          },
          "title": {
            "type": "string",
            "example": "Meeting with team"
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-18T10:00:00Z"
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-18T11:00:00Z"
          },
          "allDay": {
            "type": "boolean",
            "example": false
          },
          "addTask": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "NewTodo": {
        "type": "object",
        "required": ["title", "eventId", "end"],
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "example": "New Todo Title"
          },
          "description": {
            "type": "string",
            "example": "New Todo description"
          },
          "isImportant": {
            "type": "boolean",
            "default": false,
            "example": true
          },
          "isCompleted": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-20T10:00:00Z"
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "example": "2025-04-20T11:00:00Z"
          },
          "allDay": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "eventId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "example": "6628a6f2bcf42f001c26eec9"
          },
          "repeat": {
            "type": "string",
            "enum": ["none", "daily", "weekday", "weekend"],
            "default": "none",
            "example": "daily"
          },
          "reminder": {
            "type": "object",
            "properties": {
              "triggerBefore": {
                "type": "string",
                "enum": ["30min", "1hour", "1day", "none"],
                "default": "none",
                "example": "1hour"
              },
              "notifyAt": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "example": "2025-05-20T17:00:00Z"
              },
              "notified": {
                "type": "boolean",
                "default": false,
                "example": false
              }
            }
          }
        }
      }
    }
  }
}
